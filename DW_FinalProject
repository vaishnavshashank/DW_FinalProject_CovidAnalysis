{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "155f3f07",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Problem for Covid - 19 Data Analysis Project using Python\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "50ca7d8e",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>iso_code</th>\n",
       "      <th>continent</th>\n",
       "      <th>location</th>\n",
       "      <th>date</th>\n",
       "      <th>total_cases</th>\n",
       "      <th>new_cases</th>\n",
       "      <th>new_cases_smoothed</th>\n",
       "      <th>total_deaths</th>\n",
       "      <th>new_deaths</th>\n",
       "      <th>new_deaths_smoothed</th>\n",
       "      <th>...</th>\n",
       "      <th>gdp_per_capita</th>\n",
       "      <th>extreme_poverty</th>\n",
       "      <th>cardiovasc_death_rate</th>\n",
       "      <th>diabetes_prevalence</th>\n",
       "      <th>female_smokers</th>\n",
       "      <th>male_smokers</th>\n",
       "      <th>handwashing_facilities</th>\n",
       "      <th>hospital_beds_per_thousand</th>\n",
       "      <th>life_expectancy</th>\n",
       "      <th>human_development_index</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>AFG</td>\n",
       "      <td>Asia</td>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>31/12/19</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>1803.987</td>\n",
       "      <td>NaN</td>\n",
       "      <td>597.029</td>\n",
       "      <td>9.59</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>37.746</td>\n",
       "      <td>0.5</td>\n",
       "      <td>64.83</td>\n",
       "      <td>0.498</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>AFG</td>\n",
       "      <td>Asia</td>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>01/01/20</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>1803.987</td>\n",
       "      <td>NaN</td>\n",
       "      <td>597.029</td>\n",
       "      <td>9.59</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>37.746</td>\n",
       "      <td>0.5</td>\n",
       "      <td>64.83</td>\n",
       "      <td>0.498</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>AFG</td>\n",
       "      <td>Asia</td>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>02/01/20</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>1803.987</td>\n",
       "      <td>NaN</td>\n",
       "      <td>597.029</td>\n",
       "      <td>9.59</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>37.746</td>\n",
       "      <td>0.5</td>\n",
       "      <td>64.83</td>\n",
       "      <td>0.498</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>AFG</td>\n",
       "      <td>Asia</td>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>03/01/20</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>1803.987</td>\n",
       "      <td>NaN</td>\n",
       "      <td>597.029</td>\n",
       "      <td>9.59</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>37.746</td>\n",
       "      <td>0.5</td>\n",
       "      <td>64.83</td>\n",
       "      <td>0.498</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>AFG</td>\n",
       "      <td>Asia</td>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>04/01/20</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>1803.987</td>\n",
       "      <td>NaN</td>\n",
       "      <td>597.029</td>\n",
       "      <td>9.59</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>37.746</td>\n",
       "      <td>0.5</td>\n",
       "      <td>64.83</td>\n",
       "      <td>0.498</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>57389</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>International</td>\n",
       "      <td>13/11/20</td>\n",
       "      <td>696.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>7.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>57390</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>International</td>\n",
       "      <td>14/11/20</td>\n",
       "      <td>696.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>7.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>57391</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>International</td>\n",
       "      <td>15/11/20</td>\n",
       "      <td>696.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>7.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>57392</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>International</td>\n",
       "      <td>16/11/20</td>\n",
       "      <td>696.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>7.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>57393</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>International</td>\n",
       "      <td>17/11/20</td>\n",
       "      <td>696.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>7.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>57394 rows × 49 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      iso_code continent       location      date  total_cases  new_cases  \\\n",
       "0          AFG      Asia    Afghanistan  31/12/19          NaN        0.0   \n",
       "1          AFG      Asia    Afghanistan  01/01/20          NaN        0.0   \n",
       "2          AFG      Asia    Afghanistan  02/01/20          NaN        0.0   \n",
       "3          AFG      Asia    Afghanistan  03/01/20          NaN        0.0   \n",
       "4          AFG      Asia    Afghanistan  04/01/20          NaN        0.0   \n",
       "...        ...       ...            ...       ...          ...        ...   \n",
       "57389      NaN       NaN  International  13/11/20        696.0        NaN   \n",
       "57390      NaN       NaN  International  14/11/20        696.0        NaN   \n",
       "57391      NaN       NaN  International  15/11/20        696.0        NaN   \n",
       "57392      NaN       NaN  International  16/11/20        696.0        NaN   \n",
       "57393      NaN       NaN  International  17/11/20        696.0        NaN   \n",
       "\n",
       "       new_cases_smoothed  total_deaths  new_deaths  new_deaths_smoothed  ...  \\\n",
       "0                     NaN           NaN         0.0                  NaN  ...   \n",
       "1                     NaN           NaN         0.0                  NaN  ...   \n",
       "2                     NaN           NaN         0.0                  NaN  ...   \n",
       "3                     NaN           NaN         0.0                  NaN  ...   \n",
       "4                     NaN           NaN         0.0                  NaN  ...   \n",
       "...                   ...           ...         ...                  ...  ...   \n",
       "57389                 NaN           7.0         NaN                  NaN  ...   \n",
       "57390                 NaN           7.0         NaN                  NaN  ...   \n",
       "57391                 NaN           7.0         NaN                  NaN  ...   \n",
       "57392                 NaN           7.0         NaN                  NaN  ...   \n",
       "57393                 NaN           7.0         NaN                  NaN  ...   \n",
       "\n",
       "       gdp_per_capita  extreme_poverty  cardiovasc_death_rate  \\\n",
       "0            1803.987              NaN                597.029   \n",
       "1            1803.987              NaN                597.029   \n",
       "2            1803.987              NaN                597.029   \n",
       "3            1803.987              NaN                597.029   \n",
       "4            1803.987              NaN                597.029   \n",
       "...               ...              ...                    ...   \n",
       "57389             NaN              NaN                    NaN   \n",
       "57390             NaN              NaN                    NaN   \n",
       "57391             NaN              NaN                    NaN   \n",
       "57392             NaN              NaN                    NaN   \n",
       "57393             NaN              NaN                    NaN   \n",
       "\n",
       "       diabetes_prevalence  female_smokers  male_smokers  \\\n",
       "0                     9.59             NaN           NaN   \n",
       "1                     9.59             NaN           NaN   \n",
       "2                     9.59             NaN           NaN   \n",
       "3                     9.59             NaN           NaN   \n",
       "4                     9.59             NaN           NaN   \n",
       "...                    ...             ...           ...   \n",
       "57389                  NaN             NaN           NaN   \n",
       "57390                  NaN             NaN           NaN   \n",
       "57391                  NaN             NaN           NaN   \n",
       "57392                  NaN             NaN           NaN   \n",
       "57393                  NaN             NaN           NaN   \n",
       "\n",
       "       handwashing_facilities  hospital_beds_per_thousand  life_expectancy  \\\n",
       "0                      37.746                         0.5            64.83   \n",
       "1                      37.746                         0.5            64.83   \n",
       "2                      37.746                         0.5            64.83   \n",
       "3                      37.746                         0.5            64.83   \n",
       "4                      37.746                         0.5            64.83   \n",
       "...                       ...                         ...              ...   \n",
       "57389                     NaN                         NaN              NaN   \n",
       "57390                     NaN                         NaN              NaN   \n",
       "57391                     NaN                         NaN              NaN   \n",
       "57392                     NaN                         NaN              NaN   \n",
       "57393                     NaN                         NaN              NaN   \n",
       "\n",
       "       human_development_index  \n",
       "0                        0.498  \n",
       "1                        0.498  \n",
       "2                        0.498  \n",
       "3                        0.498  \n",
       "4                        0.498  \n",
       "...                        ...  \n",
       "57389                      NaN  \n",
       "57390                      NaN  \n",
       "57391                      NaN  \n",
       "57392                      NaN  \n",
       "57393                      NaN  \n",
       "\n",
       "[57394 rows x 49 columns]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_csv('https://raw.githubusercontent.com/SR1608/Datasets/main/covid-data.csv')\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d71e7f35",
   "metadata": {},
   "outputs": [],
   "source": [
    "#2. High Level Data Understanding:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "db10f11b",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>iso_code</th>\n",
       "      <th>continent</th>\n",
       "      <th>location</th>\n",
       "      <th>date</th>\n",
       "      <th>total_cases</th>\n",
       "      <th>new_cases</th>\n",
       "      <th>new_cases_smoothed</th>\n",
       "      <th>total_deaths</th>\n",
       "      <th>new_deaths</th>\n",
       "      <th>new_deaths_smoothed</th>\n",
       "      <th>...</th>\n",
       "      <th>gdp_per_capita</th>\n",
       "      <th>extreme_poverty</th>\n",
       "      <th>cardiovasc_death_rate</th>\n",
       "      <th>diabetes_prevalence</th>\n",
       "      <th>female_smokers</th>\n",
       "      <th>male_smokers</th>\n",
       "      <th>handwashing_facilities</th>\n",
       "      <th>hospital_beds_per_thousand</th>\n",
       "      <th>life_expectancy</th>\n",
       "      <th>human_development_index</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>AFG</td>\n",
       "      <td>Asia</td>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>31/12/19</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>1803.987</td>\n",
       "      <td>NaN</td>\n",
       "      <td>597.029</td>\n",
       "      <td>9.59</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>37.746</td>\n",
       "      <td>0.5</td>\n",
       "      <td>64.83</td>\n",
       "      <td>0.498</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>AFG</td>\n",
       "      <td>Asia</td>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>01/01/20</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>1803.987</td>\n",
       "      <td>NaN</td>\n",
       "      <td>597.029</td>\n",
       "      <td>9.59</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>37.746</td>\n",
       "      <td>0.5</td>\n",
       "      <td>64.83</td>\n",
       "      <td>0.498</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>AFG</td>\n",
       "      <td>Asia</td>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>02/01/20</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>1803.987</td>\n",
       "      <td>NaN</td>\n",
       "      <td>597.029</td>\n",
       "      <td>9.59</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>37.746</td>\n",
       "      <td>0.5</td>\n",
       "      <td>64.83</td>\n",
       "      <td>0.498</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>AFG</td>\n",
       "      <td>Asia</td>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>03/01/20</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>1803.987</td>\n",
       "      <td>NaN</td>\n",
       "      <td>597.029</td>\n",
       "      <td>9.59</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>37.746</td>\n",
       "      <td>0.5</td>\n",
       "      <td>64.83</td>\n",
       "      <td>0.498</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>AFG</td>\n",
       "      <td>Asia</td>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>04/01/20</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>1803.987</td>\n",
       "      <td>NaN</td>\n",
       "      <td>597.029</td>\n",
       "      <td>9.59</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>37.746</td>\n",
       "      <td>0.5</td>\n",
       "      <td>64.83</td>\n",
       "      <td>0.498</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 49 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "  iso_code continent     location      date  total_cases  new_cases  \\\n",
       "0      AFG      Asia  Afghanistan  31/12/19          NaN        0.0   \n",
       "1      AFG      Asia  Afghanistan  01/01/20          NaN        0.0   \n",
       "2      AFG      Asia  Afghanistan  02/01/20          NaN        0.0   \n",
       "3      AFG      Asia  Afghanistan  03/01/20          NaN        0.0   \n",
       "4      AFG      Asia  Afghanistan  04/01/20          NaN        0.0   \n",
       "\n",
       "   new_cases_smoothed  total_deaths  new_deaths  new_deaths_smoothed  ...  \\\n",
       "0                 NaN           NaN         0.0                  NaN  ...   \n",
       "1                 NaN           NaN         0.0                  NaN  ...   \n",
       "2                 NaN           NaN         0.0                  NaN  ...   \n",
       "3                 NaN           NaN         0.0                  NaN  ...   \n",
       "4                 NaN           NaN         0.0                  NaN  ...   \n",
       "\n",
       "   gdp_per_capita  extreme_poverty  cardiovasc_death_rate  \\\n",
       "0        1803.987              NaN                597.029   \n",
       "1        1803.987              NaN                597.029   \n",
       "2        1803.987              NaN                597.029   \n",
       "3        1803.987              NaN                597.029   \n",
       "4        1803.987              NaN                597.029   \n",
       "\n",
       "   diabetes_prevalence  female_smokers  male_smokers  handwashing_facilities  \\\n",
       "0                 9.59             NaN           NaN                  37.746   \n",
       "1                 9.59             NaN           NaN                  37.746   \n",
       "2                 9.59             NaN           NaN                  37.746   \n",
       "3                 9.59             NaN           NaN                  37.746   \n",
       "4                 9.59             NaN           NaN                  37.746   \n",
       "\n",
       "   hospital_beds_per_thousand  life_expectancy  human_development_index  \n",
       "0                         0.5            64.83                    0.498  \n",
       "1                         0.5            64.83                    0.498  \n",
       "2                         0.5            64.83                    0.498  \n",
       "3                         0.5            64.83                    0.498  \n",
       "4                         0.5            64.83                    0.498  \n",
       "\n",
       "[5 rows x 49 columns]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "1e58957c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(57394, 49)"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#a. Find no. of rows & columns in the dataset\n",
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "a322e1eb",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "iso_code                               object\n",
       "continent                              object\n",
       "location                               object\n",
       "date                                   object\n",
       "total_cases                           float64\n",
       "new_cases                             float64\n",
       "new_cases_smoothed                    float64\n",
       "total_deaths                          float64\n",
       "new_deaths                            float64\n",
       "new_deaths_smoothed                   float64\n",
       "total_cases_per_million               float64\n",
       "new_cases_per_million                 float64\n",
       "new_cases_smoothed_per_million        float64\n",
       "total_deaths_per_million              float64\n",
       "new_deaths_per_million                float64\n",
       "new_deaths_smoothed_per_million       float64\n",
       "reproduction_rate                     float64\n",
       "icu_patients                          float64\n",
       "icu_patients_per_million              float64\n",
       "hosp_patients                         float64\n",
       "hosp_patients_per_million             float64\n",
       "weekly_icu_admissions                 float64\n",
       "weekly_icu_admissions_per_million     float64\n",
       "weekly_hosp_admissions                float64\n",
       "weekly_hosp_admissions_per_million    float64\n",
       "total_tests                           float64\n",
       "new_tests                             float64\n",
       "total_tests_per_thousand              float64\n",
       "new_tests_per_thousand                float64\n",
       "new_tests_smoothed                    float64\n",
       "new_tests_smoothed_per_thousand       float64\n",
       "tests_per_case                        float64\n",
       "positive_rate                         float64\n",
       "stringency_index                      float64\n",
       "population                            float64\n",
       "population_density                    float64\n",
       "median_age                            float64\n",
       "aged_65_older                         float64\n",
       "aged_70_older                         float64\n",
       "gdp_per_capita                        float64\n",
       "extreme_poverty                       float64\n",
       "cardiovasc_death_rate                 float64\n",
       "diabetes_prevalence                   float64\n",
       "female_smokers                        float64\n",
       "male_smokers                          float64\n",
       "handwashing_facilities                float64\n",
       "hospital_beds_per_thousand            float64\n",
       "life_expectancy                       float64\n",
       "human_development_index               float64\n",
       "dtype: object"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#b. Data types of columns.\n",
    "df.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "56c31003",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 57394 entries, 0 to 57393\n",
      "Data columns (total 49 columns):\n",
      " #   Column                              Non-Null Count  Dtype  \n",
      "---  ------                              --------------  -----  \n",
      " 0   iso_code                            57071 non-null  object \n",
      " 1   continent                           56748 non-null  object \n",
      " 2   location                            57394 non-null  object \n",
      " 3   date                                57394 non-null  object \n",
      " 4   total_cases                         53758 non-null  float64\n",
      " 5   new_cases                           56465 non-null  float64\n",
      " 6   new_cases_smoothed                  55652 non-null  float64\n",
      " 7   total_deaths                        44368 non-null  float64\n",
      " 8   new_deaths                          56465 non-null  float64\n",
      " 9   new_deaths_smoothed                 55652 non-null  float64\n",
      " 10  total_cases_per_million             53471 non-null  float64\n",
      " 11  new_cases_per_million               56401 non-null  float64\n",
      " 12  new_cases_smoothed_per_million      55587 non-null  float64\n",
      " 13  total_deaths_per_million            44096 non-null  float64\n",
      " 14  new_deaths_per_million              56401 non-null  float64\n",
      " 15  new_deaths_smoothed_per_million     55587 non-null  float64\n",
      " 16  reproduction_rate                   37696 non-null  float64\n",
      " 17  icu_patients                        4490 non-null   float64\n",
      " 18  icu_patients_per_million            4490 non-null   float64\n",
      " 19  hosp_patients                       5005 non-null   float64\n",
      " 20  hosp_patients_per_million           5005 non-null   float64\n",
      " 21  weekly_icu_admissions               357 non-null    float64\n",
      " 22  weekly_icu_admissions_per_million   357 non-null    float64\n",
      " 23  weekly_hosp_admissions              645 non-null    float64\n",
      " 24  weekly_hosp_admissions_per_million  645 non-null    float64\n",
      " 25  total_tests                         22017 non-null  float64\n",
      " 26  new_tests                           21787 non-null  float64\n",
      " 27  total_tests_per_thousand            22017 non-null  float64\n",
      " 28  new_tests_per_thousand              21787 non-null  float64\n",
      " 29  new_tests_smoothed                  24612 non-null  float64\n",
      " 30  new_tests_smoothed_per_thousand     24612 non-null  float64\n",
      " 31  tests_per_case                      22802 non-null  float64\n",
      " 32  positive_rate                       23211 non-null  float64\n",
      " 33  stringency_index                    47847 non-null  float64\n",
      " 34  population                          57071 non-null  float64\n",
      " 35  population_density                  54371 non-null  float64\n",
      " 36  median_age                          51034 non-null  float64\n",
      " 37  aged_65_older                       50265 non-null  float64\n",
      " 38  aged_70_older                       50768 non-null  float64\n",
      " 39  gdp_per_capita                      50367 non-null  float64\n",
      " 40  extreme_poverty                     33571 non-null  float64\n",
      " 41  cardiovasc_death_rate               51013 non-null  float64\n",
      " 42  diabetes_prevalence                 52881 non-null  float64\n",
      " 43  female_smokers                      39669 non-null  float64\n",
      " 44  male_smokers                        39156 non-null  float64\n",
      " 45  handwashing_facilities              24176 non-null  float64\n",
      " 46  hospital_beds_per_thousand          45936 non-null  float64\n",
      " 47  life_expectancy                     56336 non-null  float64\n",
      " 48  human_development_index             49247 non-null  float64\n",
      "dtypes: float64(45), object(4)\n",
      "memory usage: 21.5+ MB\n"
     ]
    }
   ],
   "source": [
    "#c. Info & describe of data in dataframe\n",
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "08288995",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>total_cases</th>\n",
       "      <th>new_cases</th>\n",
       "      <th>new_cases_smoothed</th>\n",
       "      <th>total_deaths</th>\n",
       "      <th>new_deaths</th>\n",
       "      <th>new_deaths_smoothed</th>\n",
       "      <th>total_cases_per_million</th>\n",
       "      <th>new_cases_per_million</th>\n",
       "      <th>new_cases_smoothed_per_million</th>\n",
       "      <th>total_deaths_per_million</th>\n",
       "      <th>...</th>\n",
       "      <th>gdp_per_capita</th>\n",
       "      <th>extreme_poverty</th>\n",
       "      <th>cardiovasc_death_rate</th>\n",
       "      <th>diabetes_prevalence</th>\n",
       "      <th>female_smokers</th>\n",
       "      <th>male_smokers</th>\n",
       "      <th>handwashing_facilities</th>\n",
       "      <th>hospital_beds_per_thousand</th>\n",
       "      <th>life_expectancy</th>\n",
       "      <th>human_development_index</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>5.375800e+04</td>\n",
       "      <td>56465.000000</td>\n",
       "      <td>55652.000000</td>\n",
       "      <td>4.436800e+04</td>\n",
       "      <td>56465.000000</td>\n",
       "      <td>55652.000000</td>\n",
       "      <td>53471.000000</td>\n",
       "      <td>56401.000000</td>\n",
       "      <td>55587.000000</td>\n",
       "      <td>44096.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>50367.000000</td>\n",
       "      <td>33571.000000</td>\n",
       "      <td>51013.000000</td>\n",
       "      <td>52881.000000</td>\n",
       "      <td>39669.000000</td>\n",
       "      <td>39156.000000</td>\n",
       "      <td>24176.000000</td>\n",
       "      <td>45936.000000</td>\n",
       "      <td>56336.000000</td>\n",
       "      <td>49247.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>1.677974e+05</td>\n",
       "      <td>1953.576941</td>\n",
       "      <td>1920.431953</td>\n",
       "      <td>6.858639e+03</td>\n",
       "      <td>47.054317</td>\n",
       "      <td>46.835439</td>\n",
       "      <td>3139.099982</td>\n",
       "      <td>39.344804</td>\n",
       "      <td>38.403211</td>\n",
       "      <td>95.335293</td>\n",
       "      <td>...</td>\n",
       "      <td>20620.172071</td>\n",
       "      <td>12.435453</td>\n",
       "      <td>252.646642</td>\n",
       "      <td>8.070269</td>\n",
       "      <td>10.741569</td>\n",
       "      <td>32.642686</td>\n",
       "      <td>52.089636</td>\n",
       "      <td>3.089724</td>\n",
       "      <td>73.937780</td>\n",
       "      <td>0.722223</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>1.693038e+06</td>\n",
       "      <td>18269.650340</td>\n",
       "      <td>17777.391785</td>\n",
       "      <td>5.578081e+04</td>\n",
       "      <td>390.853776</td>\n",
       "      <td>378.272794</td>\n",
       "      <td>6183.455260</td>\n",
       "      <td>133.985155</td>\n",
       "      <td>101.649441</td>\n",
       "      <td>180.721699</td>\n",
       "      <td>...</td>\n",
       "      <td>20310.999832</td>\n",
       "      <td>19.427924</td>\n",
       "      <td>117.522344</td>\n",
       "      <td>4.189605</td>\n",
       "      <td>10.470743</td>\n",
       "      <td>13.453566</td>\n",
       "      <td>31.645306</td>\n",
       "      <td>2.513193</td>\n",
       "      <td>7.397016</td>\n",
       "      <td>0.153261</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000000e+00</td>\n",
       "      <td>-8261.000000</td>\n",
       "      <td>-552.000000</td>\n",
       "      <td>1.000000e+00</td>\n",
       "      <td>-1918.000000</td>\n",
       "      <td>-232.143000</td>\n",
       "      <td>0.001000</td>\n",
       "      <td>-2212.545000</td>\n",
       "      <td>-269.978000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>661.240000</td>\n",
       "      <td>0.100000</td>\n",
       "      <td>79.370000</td>\n",
       "      <td>0.990000</td>\n",
       "      <td>0.100000</td>\n",
       "      <td>7.700000</td>\n",
       "      <td>1.188000</td>\n",
       "      <td>0.100000</td>\n",
       "      <td>53.280000</td>\n",
       "      <td>0.354000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>1.800000e+02</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.857000</td>\n",
       "      <td>1.300000e+01</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>90.033000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.260000</td>\n",
       "      <td>3.977750</td>\n",
       "      <td>...</td>\n",
       "      <td>5321.444000</td>\n",
       "      <td>0.500000</td>\n",
       "      <td>156.139000</td>\n",
       "      <td>5.310000</td>\n",
       "      <td>1.900000</td>\n",
       "      <td>21.400000</td>\n",
       "      <td>21.222000</td>\n",
       "      <td>1.300000</td>\n",
       "      <td>69.870000</td>\n",
       "      <td>0.601000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>2.070000e+03</td>\n",
       "      <td>14.000000</td>\n",
       "      <td>19.429000</td>\n",
       "      <td>8.400000e+01</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.286000</td>\n",
       "      <td>593.663000</td>\n",
       "      <td>2.194000</td>\n",
       "      <td>3.863000</td>\n",
       "      <td>20.383000</td>\n",
       "      <td>...</td>\n",
       "      <td>13913.839000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>238.339000</td>\n",
       "      <td>7.110000</td>\n",
       "      <td>6.400000</td>\n",
       "      <td>31.400000</td>\n",
       "      <td>52.232000</td>\n",
       "      <td>2.500000</td>\n",
       "      <td>75.345000</td>\n",
       "      <td>0.752000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>2.235675e+04</td>\n",
       "      <td>235.000000</td>\n",
       "      <td>245.286000</td>\n",
       "      <td>7.270000e+02</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>3487.050000</td>\n",
       "      <td>25.941000</td>\n",
       "      <td>29.678500</td>\n",
       "      <td>90.571250</td>\n",
       "      <td>...</td>\n",
       "      <td>31400.840000</td>\n",
       "      <td>18.100000</td>\n",
       "      <td>318.991000</td>\n",
       "      <td>10.390000</td>\n",
       "      <td>19.600000</td>\n",
       "      <td>40.900000</td>\n",
       "      <td>83.741000</td>\n",
       "      <td>4.200000</td>\n",
       "      <td>79.380000</td>\n",
       "      <td>0.847000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>5.515465e+07</td>\n",
       "      <td>646281.000000</td>\n",
       "      <td>584981.857000</td>\n",
       "      <td>1.328537e+06</td>\n",
       "      <td>10600.000000</td>\n",
       "      <td>9027.714000</td>\n",
       "      <td>76541.772000</td>\n",
       "      <td>8652.658000</td>\n",
       "      <td>2472.188000</td>\n",
       "      <td>1248.014000</td>\n",
       "      <td>...</td>\n",
       "      <td>116935.600000</td>\n",
       "      <td>77.600000</td>\n",
       "      <td>724.417000</td>\n",
       "      <td>30.530000</td>\n",
       "      <td>44.000000</td>\n",
       "      <td>78.100000</td>\n",
       "      <td>98.999000</td>\n",
       "      <td>13.800000</td>\n",
       "      <td>86.750000</td>\n",
       "      <td>0.953000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>8 rows × 45 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        total_cases      new_cases  new_cases_smoothed  total_deaths  \\\n",
       "count  5.375800e+04   56465.000000        55652.000000  4.436800e+04   \n",
       "mean   1.677974e+05    1953.576941         1920.431953  6.858639e+03   \n",
       "std    1.693038e+06   18269.650340        17777.391785  5.578081e+04   \n",
       "min    1.000000e+00   -8261.000000         -552.000000  1.000000e+00   \n",
       "25%    1.800000e+02       0.000000            0.857000  1.300000e+01   \n",
       "50%    2.070000e+03      14.000000           19.429000  8.400000e+01   \n",
       "75%    2.235675e+04     235.000000          245.286000  7.270000e+02   \n",
       "max    5.515465e+07  646281.000000       584981.857000  1.328537e+06   \n",
       "\n",
       "         new_deaths  new_deaths_smoothed  total_cases_per_million  \\\n",
       "count  56465.000000         55652.000000             53471.000000   \n",
       "mean      47.054317            46.835439              3139.099982   \n",
       "std      390.853776           378.272794              6183.455260   \n",
       "min    -1918.000000          -232.143000                 0.001000   \n",
       "25%        0.000000             0.000000                90.033000   \n",
       "50%        0.000000             0.286000               593.663000   \n",
       "75%        4.000000             4.000000              3487.050000   \n",
       "max    10600.000000          9027.714000             76541.772000   \n",
       "\n",
       "       new_cases_per_million  new_cases_smoothed_per_million  \\\n",
       "count           56401.000000                    55587.000000   \n",
       "mean               39.344804                       38.403211   \n",
       "std               133.985155                      101.649441   \n",
       "min             -2212.545000                     -269.978000   \n",
       "25%                 0.000000                        0.260000   \n",
       "50%                 2.194000                        3.863000   \n",
       "75%                25.941000                       29.678500   \n",
       "max              8652.658000                     2472.188000   \n",
       "\n",
       "       total_deaths_per_million  ...  gdp_per_capita  extreme_poverty  \\\n",
       "count              44096.000000  ...    50367.000000     33571.000000   \n",
       "mean                  95.335293  ...    20620.172071        12.435453   \n",
       "std                  180.721699  ...    20310.999832        19.427924   \n",
       "min                    0.000000  ...      661.240000         0.100000   \n",
       "25%                    3.977750  ...     5321.444000         0.500000   \n",
       "50%                   20.383000  ...    13913.839000         2.000000   \n",
       "75%                   90.571250  ...    31400.840000        18.100000   \n",
       "max                 1248.014000  ...   116935.600000        77.600000   \n",
       "\n",
       "       cardiovasc_death_rate  diabetes_prevalence  female_smokers  \\\n",
       "count           51013.000000         52881.000000    39669.000000   \n",
       "mean              252.646642             8.070269       10.741569   \n",
       "std               117.522344             4.189605       10.470743   \n",
       "min                79.370000             0.990000        0.100000   \n",
       "25%               156.139000             5.310000        1.900000   \n",
       "50%               238.339000             7.110000        6.400000   \n",
       "75%               318.991000            10.390000       19.600000   \n",
       "max               724.417000            30.530000       44.000000   \n",
       "\n",
       "       male_smokers  handwashing_facilities  hospital_beds_per_thousand  \\\n",
       "count  39156.000000            24176.000000                45936.000000   \n",
       "mean      32.642686               52.089636                    3.089724   \n",
       "std       13.453566               31.645306                    2.513193   \n",
       "min        7.700000                1.188000                    0.100000   \n",
       "25%       21.400000               21.222000                    1.300000   \n",
       "50%       31.400000               52.232000                    2.500000   \n",
       "75%       40.900000               83.741000                    4.200000   \n",
       "max       78.100000               98.999000                   13.800000   \n",
       "\n",
       "       life_expectancy  human_development_index  \n",
       "count     56336.000000             49247.000000  \n",
       "mean         73.937780                 0.722223  \n",
       "std           7.397016                 0.153261  \n",
       "min          53.280000                 0.354000  \n",
       "25%          69.870000                 0.601000  \n",
       "50%          75.345000                 0.752000  \n",
       "75%          79.380000                 0.847000  \n",
       "max          86.750000                 0.953000  \n",
       "\n",
       "[8 rows x 45 columns]"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "b4d87b00",
   "metadata": {},
   "outputs": [],
   "source": [
    "#3. Low Level Data Understanding :"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "c9bb303a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "216"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#a. Find count of unique values in location column.\n",
    "df['location'].nunique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "c48aeb36",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Europe           14828\n",
       "Africa           13637\n",
       "Asia             13528\n",
       "North America     9116\n",
       "South America     3404\n",
       "Oceania           2235\n",
       "Name: continent, dtype: int64"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#b. Find which continent has maximum frequency using values counts.\n",
    "df['continent'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "bdeab209",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "167797.3688753302"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#c. Find maximum & mean value in 'total_cases'.\n",
    "df['total_cases'].mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "8198b7f8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "55154651.0"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['total_cases'].max()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "e991f557",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    4.436800e+04\n",
       "mean     6.858639e+03\n",
       "std      5.578081e+04\n",
       "min      1.000000e+00\n",
       "25%      1.300000e+01\n",
       "50%      8.400000e+01\n",
       "75%      7.270000e+02\n",
       "max      1.328537e+06\n",
       "Name: total_deaths, dtype: float64"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#d. Find 25%,50% & 75% quartile value in 'total_deaths'.\n",
    "df['total_deaths'].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "96d207e2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>human_development_index</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>continent</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Africa</th>\n",
       "      <td>0.797</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Asia</th>\n",
       "      <td>0.933</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Europe</th>\n",
       "      <td>0.953</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>North America</th>\n",
       "      <td>0.926</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Oceania</th>\n",
       "      <td>0.939</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>South America</th>\n",
       "      <td>0.843</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               human_development_index\n",
       "continent                             \n",
       "Africa                           0.797\n",
       "Asia                             0.933\n",
       "Europe                           0.953\n",
       "North America                    0.926\n",
       "Oceania                          0.939\n",
       "South America                    0.843"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#e. Find which continent has maximum 'human_development_index'\n",
    "df.groupby(['continent']).agg({'human_development_index':'max'})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "530953cc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>gdp_per_capita</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>continent</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Africa</th>\n",
       "      <td>661.240</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Asia</th>\n",
       "      <td>1479.147</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Europe</th>\n",
       "      <td>5189.972</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>North America</th>\n",
       "      <td>1653.173</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Oceania</th>\n",
       "      <td>2205.923</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>South America</th>\n",
       "      <td>6885.829</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               gdp_per_capita\n",
       "continent                    \n",
       "Africa                661.240\n",
       "Asia                 1479.147\n",
       "Europe               5189.972\n",
       "North America        1653.173\n",
       "Oceania              2205.923\n",
       "South America        6885.829"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#f. Find which continent has minimum 'gdp_per_capita'\n",
    "df.groupby(['continent']).agg({'gdp_per_capita':'min'})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "468e5e5f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>continent</th>\n",
       "      <th>location</th>\n",
       "      <th>date</th>\n",
       "      <th>total_cases</th>\n",
       "      <th>total_deaths</th>\n",
       "      <th>gdp_per_capita</th>\n",
       "      <th>human_development_index</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Asia</td>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>31/12/19</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1803.987</td>\n",
       "      <td>0.498</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Asia</td>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>01/01/20</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1803.987</td>\n",
       "      <td>0.498</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Asia</td>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>02/01/20</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1803.987</td>\n",
       "      <td>0.498</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Asia</td>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>03/01/20</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1803.987</td>\n",
       "      <td>0.498</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Asia</td>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>04/01/20</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1803.987</td>\n",
       "      <td>0.498</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>57389</th>\n",
       "      <td>NaN</td>\n",
       "      <td>International</td>\n",
       "      <td>13/11/20</td>\n",
       "      <td>696.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>57390</th>\n",
       "      <td>NaN</td>\n",
       "      <td>International</td>\n",
       "      <td>14/11/20</td>\n",
       "      <td>696.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>57391</th>\n",
       "      <td>NaN</td>\n",
       "      <td>International</td>\n",
       "      <td>15/11/20</td>\n",
       "      <td>696.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>57392</th>\n",
       "      <td>NaN</td>\n",
       "      <td>International</td>\n",
       "      <td>16/11/20</td>\n",
       "      <td>696.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>57393</th>\n",
       "      <td>NaN</td>\n",
       "      <td>International</td>\n",
       "      <td>17/11/20</td>\n",
       "      <td>696.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>57394 rows × 7 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      continent       location      date  total_cases  total_deaths  \\\n",
       "0          Asia    Afghanistan  31/12/19          NaN           NaN   \n",
       "1          Asia    Afghanistan  01/01/20          NaN           NaN   \n",
       "2          Asia    Afghanistan  02/01/20          NaN           NaN   \n",
       "3          Asia    Afghanistan  03/01/20          NaN           NaN   \n",
       "4          Asia    Afghanistan  04/01/20          NaN           NaN   \n",
       "...         ...            ...       ...          ...           ...   \n",
       "57389       NaN  International  13/11/20        696.0           7.0   \n",
       "57390       NaN  International  14/11/20        696.0           7.0   \n",
       "57391       NaN  International  15/11/20        696.0           7.0   \n",
       "57392       NaN  International  16/11/20        696.0           7.0   \n",
       "57393       NaN  International  17/11/20        696.0           7.0   \n",
       "\n",
       "       gdp_per_capita  human_development_index  \n",
       "0            1803.987                    0.498  \n",
       "1            1803.987                    0.498  \n",
       "2            1803.987                    0.498  \n",
       "3            1803.987                    0.498  \n",
       "4            1803.987                    0.498  \n",
       "...               ...                      ...  \n",
       "57389             NaN                      NaN  \n",
       "57390             NaN                      NaN  \n",
       "57391             NaN                      NaN  \n",
       "57392             NaN                      NaN  \n",
       "57393             NaN                      NaN  \n",
       "\n",
       "[57394 rows x 7 columns]"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#4. Filter the dataframe with only this columns ['continent','location','date','total_cases','total_deaths','gdp_per_capita',' human_development_index'] \n",
    "#and update the data frame\n",
    "\n",
    "df = df[['continent','location','date','total_cases','total_deaths','gdp_per_capita','human_development_index']]\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "247534e4",
   "metadata": {},
   "outputs": [],
   "source": [
    "#5. Data Cleaning \n",
    "#a. Remove all duplicates observations \n",
    "#b. Find missing values in all columns \n",
    "#c. Remove all observations where continent column value is missing Tip : using subset parameter in dropna \n",
    "#d. Fill all missing values with 0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "2af0c32b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>continent</th>\n",
       "      <th>location</th>\n",
       "      <th>date</th>\n",
       "      <th>total_cases</th>\n",
       "      <th>total_deaths</th>\n",
       "      <th>gdp_per_capita</th>\n",
       "      <th>human_development_index</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Asia</td>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>31/12/19</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1803.987</td>\n",
       "      <td>0.498</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Asia</td>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>01/01/20</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1803.987</td>\n",
       "      <td>0.498</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Asia</td>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>02/01/20</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1803.987</td>\n",
       "      <td>0.498</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Asia</td>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>03/01/20</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1803.987</td>\n",
       "      <td>0.498</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Asia</td>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>04/01/20</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1803.987</td>\n",
       "      <td>0.498</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>57389</th>\n",
       "      <td>NaN</td>\n",
       "      <td>International</td>\n",
       "      <td>13/11/20</td>\n",
       "      <td>696.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>57390</th>\n",
       "      <td>NaN</td>\n",
       "      <td>International</td>\n",
       "      <td>14/11/20</td>\n",
       "      <td>696.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>57391</th>\n",
       "      <td>NaN</td>\n",
       "      <td>International</td>\n",
       "      <td>15/11/20</td>\n",
       "      <td>696.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>57392</th>\n",
       "      <td>NaN</td>\n",
       "      <td>International</td>\n",
       "      <td>16/11/20</td>\n",
       "      <td>696.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>57393</th>\n",
       "      <td>NaN</td>\n",
       "      <td>International</td>\n",
       "      <td>17/11/20</td>\n",
       "      <td>696.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>57394 rows × 7 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      continent       location      date  total_cases  total_deaths  \\\n",
       "0          Asia    Afghanistan  31/12/19          NaN           NaN   \n",
       "1          Asia    Afghanistan  01/01/20          NaN           NaN   \n",
       "2          Asia    Afghanistan  02/01/20          NaN           NaN   \n",
       "3          Asia    Afghanistan  03/01/20          NaN           NaN   \n",
       "4          Asia    Afghanistan  04/01/20          NaN           NaN   \n",
       "...         ...            ...       ...          ...           ...   \n",
       "57389       NaN  International  13/11/20        696.0           7.0   \n",
       "57390       NaN  International  14/11/20        696.0           7.0   \n",
       "57391       NaN  International  15/11/20        696.0           7.0   \n",
       "57392       NaN  International  16/11/20        696.0           7.0   \n",
       "57393       NaN  International  17/11/20        696.0           7.0   \n",
       "\n",
       "       gdp_per_capita  human_development_index  \n",
       "0            1803.987                    0.498  \n",
       "1            1803.987                    0.498  \n",
       "2            1803.987                    0.498  \n",
       "3            1803.987                    0.498  \n",
       "4            1803.987                    0.498  \n",
       "...               ...                      ...  \n",
       "57389             NaN                      NaN  \n",
       "57390             NaN                      NaN  \n",
       "57391             NaN                      NaN  \n",
       "57392             NaN                      NaN  \n",
       "57393             NaN                      NaN  \n",
       "\n",
       "[57394 rows x 7 columns]"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#a. Remove all duplicates observations\n",
    "df.drop_duplicates()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "11419400",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>continent</th>\n",
       "      <th>location</th>\n",
       "      <th>date</th>\n",
       "      <th>total_cases</th>\n",
       "      <th>total_deaths</th>\n",
       "      <th>gdp_per_capita</th>\n",
       "      <th>human_development_index</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>57389</th>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>57390</th>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>57391</th>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>57392</th>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>57393</th>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>57394 rows × 7 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       continent  location   date  total_cases  total_deaths  gdp_per_capita  \\\n",
       "0          False     False  False         True          True           False   \n",
       "1          False     False  False         True          True           False   \n",
       "2          False     False  False         True          True           False   \n",
       "3          False     False  False         True          True           False   \n",
       "4          False     False  False         True          True           False   \n",
       "...          ...       ...    ...          ...           ...             ...   \n",
       "57389       True     False  False        False         False            True   \n",
       "57390       True     False  False        False         False            True   \n",
       "57391       True     False  False        False         False            True   \n",
       "57392       True     False  False        False         False            True   \n",
       "57393       True     False  False        False         False            True   \n",
       "\n",
       "       human_development_index  \n",
       "0                        False  \n",
       "1                        False  \n",
       "2                        False  \n",
       "3                        False  \n",
       "4                        False  \n",
       "...                        ...  \n",
       "57389                     True  \n",
       "57390                     True  \n",
       "57391                     True  \n",
       "57392                     True  \n",
       "57393                     True  \n",
       "\n",
       "[57394 rows x 7 columns]"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#b. Find missing values in all columns\n",
    "df.isna()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "3c377cb9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "continent                    646\n",
       "location                       0\n",
       "date                           0\n",
       "total_cases                 3636\n",
       "total_deaths               13026\n",
       "gdp_per_capita              7027\n",
       "human_development_index     8147\n",
       "dtype: int64"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "650b12bc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>continent</th>\n",
       "      <th>location</th>\n",
       "      <th>date</th>\n",
       "      <th>total_cases</th>\n",
       "      <th>total_deaths</th>\n",
       "      <th>gdp_per_capita</th>\n",
       "      <th>human_development_index</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Asia</td>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>31/12/19</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1803.987</td>\n",
       "      <td>0.498</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Asia</td>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>01/01/20</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1803.987</td>\n",
       "      <td>0.498</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Asia</td>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>02/01/20</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1803.987</td>\n",
       "      <td>0.498</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Asia</td>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>03/01/20</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1803.987</td>\n",
       "      <td>0.498</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Asia</td>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>04/01/20</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1803.987</td>\n",
       "      <td>0.498</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>56743</th>\n",
       "      <td>Africa</td>\n",
       "      <td>Zimbabwe</td>\n",
       "      <td>13/11/20</td>\n",
       "      <td>8696.0</td>\n",
       "      <td>255.0</td>\n",
       "      <td>1899.775</td>\n",
       "      <td>0.535</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>56744</th>\n",
       "      <td>Africa</td>\n",
       "      <td>Zimbabwe</td>\n",
       "      <td>14/11/20</td>\n",
       "      <td>8765.0</td>\n",
       "      <td>257.0</td>\n",
       "      <td>1899.775</td>\n",
       "      <td>0.535</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>56745</th>\n",
       "      <td>Africa</td>\n",
       "      <td>Zimbabwe</td>\n",
       "      <td>15/11/20</td>\n",
       "      <td>8786.0</td>\n",
       "      <td>257.0</td>\n",
       "      <td>1899.775</td>\n",
       "      <td>0.535</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>56746</th>\n",
       "      <td>Africa</td>\n",
       "      <td>Zimbabwe</td>\n",
       "      <td>16/11/20</td>\n",
       "      <td>8786.0</td>\n",
       "      <td>257.0</td>\n",
       "      <td>1899.775</td>\n",
       "      <td>0.535</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>56747</th>\n",
       "      <td>Africa</td>\n",
       "      <td>Zimbabwe</td>\n",
       "      <td>17/11/20</td>\n",
       "      <td>8897.0</td>\n",
       "      <td>257.0</td>\n",
       "      <td>1899.775</td>\n",
       "      <td>0.535</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>56748 rows × 7 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      continent     location      date  total_cases  total_deaths  \\\n",
       "0          Asia  Afghanistan  31/12/19          NaN           NaN   \n",
       "1          Asia  Afghanistan  01/01/20          NaN           NaN   \n",
       "2          Asia  Afghanistan  02/01/20          NaN           NaN   \n",
       "3          Asia  Afghanistan  03/01/20          NaN           NaN   \n",
       "4          Asia  Afghanistan  04/01/20          NaN           NaN   \n",
       "...         ...          ...       ...          ...           ...   \n",
       "56743    Africa     Zimbabwe  13/11/20       8696.0         255.0   \n",
       "56744    Africa     Zimbabwe  14/11/20       8765.0         257.0   \n",
       "56745    Africa     Zimbabwe  15/11/20       8786.0         257.0   \n",
       "56746    Africa     Zimbabwe  16/11/20       8786.0         257.0   \n",
       "56747    Africa     Zimbabwe  17/11/20       8897.0         257.0   \n",
       "\n",
       "       gdp_per_capita  human_development_index  \n",
       "0            1803.987                    0.498  \n",
       "1            1803.987                    0.498  \n",
       "2            1803.987                    0.498  \n",
       "3            1803.987                    0.498  \n",
       "4            1803.987                    0.498  \n",
       "...               ...                      ...  \n",
       "56743        1899.775                    0.535  \n",
       "56744        1899.775                    0.535  \n",
       "56745        1899.775                    0.535  \n",
       "56746        1899.775                    0.535  \n",
       "56747        1899.775                    0.535  \n",
       "\n",
       "[56748 rows x 7 columns]"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "##c. Remove all observations where continent column value is missing (Tip : using subset parameter in dropna)\n",
    "df.dropna(subset=['continent'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "f72374da",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>continent</th>\n",
       "      <th>location</th>\n",
       "      <th>date</th>\n",
       "      <th>total_cases</th>\n",
       "      <th>total_deaths</th>\n",
       "      <th>gdp_per_capita</th>\n",
       "      <th>human_development_index</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Asia</td>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>31/12/19</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1803.987</td>\n",
       "      <td>0.498</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Asia</td>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>01/01/20</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1803.987</td>\n",
       "      <td>0.498</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Asia</td>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>02/01/20</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1803.987</td>\n",
       "      <td>0.498</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Asia</td>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>03/01/20</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1803.987</td>\n",
       "      <td>0.498</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Asia</td>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>04/01/20</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1803.987</td>\n",
       "      <td>0.498</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>57389</th>\n",
       "      <td>0</td>\n",
       "      <td>International</td>\n",
       "      <td>13/11/20</td>\n",
       "      <td>696.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>57390</th>\n",
       "      <td>0</td>\n",
       "      <td>International</td>\n",
       "      <td>14/11/20</td>\n",
       "      <td>696.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>57391</th>\n",
       "      <td>0</td>\n",
       "      <td>International</td>\n",
       "      <td>15/11/20</td>\n",
       "      <td>696.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>57392</th>\n",
       "      <td>0</td>\n",
       "      <td>International</td>\n",
       "      <td>16/11/20</td>\n",
       "      <td>696.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>57393</th>\n",
       "      <td>0</td>\n",
       "      <td>International</td>\n",
       "      <td>17/11/20</td>\n",
       "      <td>696.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>57394 rows × 7 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      continent       location      date  total_cases  total_deaths  \\\n",
       "0          Asia    Afghanistan  31/12/19          0.0           0.0   \n",
       "1          Asia    Afghanistan  01/01/20          0.0           0.0   \n",
       "2          Asia    Afghanistan  02/01/20          0.0           0.0   \n",
       "3          Asia    Afghanistan  03/01/20          0.0           0.0   \n",
       "4          Asia    Afghanistan  04/01/20          0.0           0.0   \n",
       "...         ...            ...       ...          ...           ...   \n",
       "57389         0  International  13/11/20        696.0           7.0   \n",
       "57390         0  International  14/11/20        696.0           7.0   \n",
       "57391         0  International  15/11/20        696.0           7.0   \n",
       "57392         0  International  16/11/20        696.0           7.0   \n",
       "57393         0  International  17/11/20        696.0           7.0   \n",
       "\n",
       "       gdp_per_capita  human_development_index  \n",
       "0            1803.987                    0.498  \n",
       "1            1803.987                    0.498  \n",
       "2            1803.987                    0.498  \n",
       "3            1803.987                    0.498  \n",
       "4            1803.987                    0.498  \n",
       "...               ...                      ...  \n",
       "57389           0.000                    0.000  \n",
       "57390           0.000                    0.000  \n",
       "57391           0.000                    0.000  \n",
       "57392           0.000                    0.000  \n",
       "57393           0.000                    0.000  \n",
       "\n",
       "[57394 rows x 7 columns]"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#d. Fill all missing values with 0\n",
    "df.fillna(0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "9b0e286d",
   "metadata": {},
   "outputs": [],
   "source": [
    "#6. Date time format : \n",
    "#a. Convert date column in datetime format using pandas.to_datetime\n",
    "#b. Create new column month after extracting month data from date column"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "82191760",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>continent</th>\n",
       "      <th>location</th>\n",
       "      <th>date</th>\n",
       "      <th>total_cases</th>\n",
       "      <th>total_deaths</th>\n",
       "      <th>gdp_per_capita</th>\n",
       "      <th>human_development_index</th>\n",
       "      <th>month</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Asia</td>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>2019-12-31</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1803.987</td>\n",
       "      <td>0.498</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Asia</td>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>2020-01-01</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1803.987</td>\n",
       "      <td>0.498</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Asia</td>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>2020-02-01</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1803.987</td>\n",
       "      <td>0.498</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Asia</td>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>2020-03-01</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1803.987</td>\n",
       "      <td>0.498</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Asia</td>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>2020-04-01</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1803.987</td>\n",
       "      <td>0.498</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>57389</th>\n",
       "      <td>NaN</td>\n",
       "      <td>International</td>\n",
       "      <td>2020-11-13</td>\n",
       "      <td>696.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>57390</th>\n",
       "      <td>NaN</td>\n",
       "      <td>International</td>\n",
       "      <td>2020-11-14</td>\n",
       "      <td>696.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>57391</th>\n",
       "      <td>NaN</td>\n",
       "      <td>International</td>\n",
       "      <td>2020-11-15</td>\n",
       "      <td>696.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>57392</th>\n",
       "      <td>NaN</td>\n",
       "      <td>International</td>\n",
       "      <td>2020-11-16</td>\n",
       "      <td>696.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>57393</th>\n",
       "      <td>NaN</td>\n",
       "      <td>International</td>\n",
       "      <td>2020-11-17</td>\n",
       "      <td>696.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>57394 rows × 8 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      continent       location       date  total_cases  total_deaths  \\\n",
       "0          Asia    Afghanistan 2019-12-31          NaN           NaN   \n",
       "1          Asia    Afghanistan 2020-01-01          NaN           NaN   \n",
       "2          Asia    Afghanistan 2020-02-01          NaN           NaN   \n",
       "3          Asia    Afghanistan 2020-03-01          NaN           NaN   \n",
       "4          Asia    Afghanistan 2020-04-01          NaN           NaN   \n",
       "...         ...            ...        ...          ...           ...   \n",
       "57389       NaN  International 2020-11-13        696.0           7.0   \n",
       "57390       NaN  International 2020-11-14        696.0           7.0   \n",
       "57391       NaN  International 2020-11-15        696.0           7.0   \n",
       "57392       NaN  International 2020-11-16        696.0           7.0   \n",
       "57393       NaN  International 2020-11-17        696.0           7.0   \n",
       "\n",
       "       gdp_per_capita  human_development_index  month  \n",
       "0            1803.987                    0.498     12  \n",
       "1            1803.987                    0.498      1  \n",
       "2            1803.987                    0.498      2  \n",
       "3            1803.987                    0.498      3  \n",
       "4            1803.987                    0.498      4  \n",
       "...               ...                      ...    ...  \n",
       "57389             NaN                      NaN     11  \n",
       "57390             NaN                      NaN     11  \n",
       "57391             NaN                      NaN     11  \n",
       "57392             NaN                      NaN     11  \n",
       "57393             NaN                      NaN     11  \n",
       "\n",
       "[57394 rows x 8 columns]"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#a. Convert date column in datetime format using pandas.to_datetime\n",
    "pd.to_datetime(df['date'])\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "d36dbc80",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\nithin\\AppData\\Local\\Temp/ipykernel_17164/71345053.py:3: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  df['month'] = df['date'].dt.month\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>continent</th>\n",
       "      <th>location</th>\n",
       "      <th>date</th>\n",
       "      <th>total_cases</th>\n",
       "      <th>total_deaths</th>\n",
       "      <th>gdp_per_capita</th>\n",
       "      <th>human_development_index</th>\n",
       "      <th>month</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Asia</td>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>2019-12-31</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1803.987</td>\n",
       "      <td>0.498</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Asia</td>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>2020-01-01</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1803.987</td>\n",
       "      <td>0.498</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Asia</td>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>2020-02-01</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1803.987</td>\n",
       "      <td>0.498</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Asia</td>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>2020-03-01</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1803.987</td>\n",
       "      <td>0.498</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Asia</td>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>2020-04-01</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1803.987</td>\n",
       "      <td>0.498</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>57389</th>\n",
       "      <td>NaN</td>\n",
       "      <td>International</td>\n",
       "      <td>2020-11-13</td>\n",
       "      <td>696.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>57390</th>\n",
       "      <td>NaN</td>\n",
       "      <td>International</td>\n",
       "      <td>2020-11-14</td>\n",
       "      <td>696.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>57391</th>\n",
       "      <td>NaN</td>\n",
       "      <td>International</td>\n",
       "      <td>2020-11-15</td>\n",
       "      <td>696.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>57392</th>\n",
       "      <td>NaN</td>\n",
       "      <td>International</td>\n",
       "      <td>2020-11-16</td>\n",
       "      <td>696.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>57393</th>\n",
       "      <td>NaN</td>\n",
       "      <td>International</td>\n",
       "      <td>2020-11-17</td>\n",
       "      <td>696.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>57394 rows × 8 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      continent       location       date  total_cases  total_deaths  \\\n",
       "0          Asia    Afghanistan 2019-12-31          NaN           NaN   \n",
       "1          Asia    Afghanistan 2020-01-01          NaN           NaN   \n",
       "2          Asia    Afghanistan 2020-02-01          NaN           NaN   \n",
       "3          Asia    Afghanistan 2020-03-01          NaN           NaN   \n",
       "4          Asia    Afghanistan 2020-04-01          NaN           NaN   \n",
       "...         ...            ...        ...          ...           ...   \n",
       "57389       NaN  International 2020-11-13        696.0           7.0   \n",
       "57390       NaN  International 2020-11-14        696.0           7.0   \n",
       "57391       NaN  International 2020-11-15        696.0           7.0   \n",
       "57392       NaN  International 2020-11-16        696.0           7.0   \n",
       "57393       NaN  International 2020-11-17        696.0           7.0   \n",
       "\n",
       "       gdp_per_capita  human_development_index  month  \n",
       "0            1803.987                    0.498     12  \n",
       "1            1803.987                    0.498      1  \n",
       "2            1803.987                    0.498      2  \n",
       "3            1803.987                    0.498      3  \n",
       "4            1803.987                    0.498      4  \n",
       "...               ...                      ...    ...  \n",
       "57389             NaN                      NaN     11  \n",
       "57390             NaN                      NaN     11  \n",
       "57391             NaN                      NaN     11  \n",
       "57392             NaN                      NaN     11  \n",
       "57393             NaN                      NaN     11  \n",
       "\n",
       "[57394 rows x 8 columns]"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#b. Create new column month after extracting month data from date column\n",
    "#df['month'] = pd.DatetimeIndex(df['date']).month\n",
    "df['month'] = df['date'].dt.month\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "8bcda464",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\nithin\\AppData\\Local\\Temp/ipykernel_17164/2128840127.py:1: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  df['month'] = pd.DatetimeIndex(df['date']).month\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>continent</th>\n",
       "      <th>location</th>\n",
       "      <th>date</th>\n",
       "      <th>total_cases</th>\n",
       "      <th>total_deaths</th>\n",
       "      <th>gdp_per_capita</th>\n",
       "      <th>human_development_index</th>\n",
       "      <th>month</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Asia</td>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>2019-12-31</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1803.987</td>\n",
       "      <td>0.498</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Asia</td>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>2020-01-01</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1803.987</td>\n",
       "      <td>0.498</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Asia</td>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>2020-02-01</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1803.987</td>\n",
       "      <td>0.498</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Asia</td>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>2020-03-01</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1803.987</td>\n",
       "      <td>0.498</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Asia</td>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>2020-04-01</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1803.987</td>\n",
       "      <td>0.498</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>57389</th>\n",
       "      <td>NaN</td>\n",
       "      <td>International</td>\n",
       "      <td>2020-11-13</td>\n",
       "      <td>696.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>57390</th>\n",
       "      <td>NaN</td>\n",
       "      <td>International</td>\n",
       "      <td>2020-11-14</td>\n",
       "      <td>696.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>57391</th>\n",
       "      <td>NaN</td>\n",
       "      <td>International</td>\n",
       "      <td>2020-11-15</td>\n",
       "      <td>696.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>57392</th>\n",
       "      <td>NaN</td>\n",
       "      <td>International</td>\n",
       "      <td>2020-11-16</td>\n",
       "      <td>696.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>57393</th>\n",
       "      <td>NaN</td>\n",
       "      <td>International</td>\n",
       "      <td>2020-11-17</td>\n",
       "      <td>696.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>57394 rows × 8 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      continent       location       date  total_cases  total_deaths  \\\n",
       "0          Asia    Afghanistan 2019-12-31          NaN           NaN   \n",
       "1          Asia    Afghanistan 2020-01-01          NaN           NaN   \n",
       "2          Asia    Afghanistan 2020-02-01          NaN           NaN   \n",
       "3          Asia    Afghanistan 2020-03-01          NaN           NaN   \n",
       "4          Asia    Afghanistan 2020-04-01          NaN           NaN   \n",
       "...         ...            ...        ...          ...           ...   \n",
       "57389       NaN  International 2020-11-13        696.0           7.0   \n",
       "57390       NaN  International 2020-11-14        696.0           7.0   \n",
       "57391       NaN  International 2020-11-15        696.0           7.0   \n",
       "57392       NaN  International 2020-11-16        696.0           7.0   \n",
       "57393       NaN  International 2020-11-17        696.0           7.0   \n",
       "\n",
       "       gdp_per_capita  human_development_index  month  \n",
       "0            1803.987                    0.498     12  \n",
       "1            1803.987                    0.498      1  \n",
       "2            1803.987                    0.498      2  \n",
       "3            1803.987                    0.498      3  \n",
       "4            1803.987                    0.498      4  \n",
       "...               ...                      ...    ...  \n",
       "57389             NaN                      NaN     11  \n",
       "57390             NaN                      NaN     11  \n",
       "57391             NaN                      NaN     11  \n",
       "57392             NaN                      NaN     11  \n",
       "57393             NaN                      NaN     11  \n",
       "\n",
       "[57394 rows x 8 columns]"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['month'] = pd.DatetimeIndex(df['date']).month\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "bf022c98",
   "metadata": {},
   "outputs": [],
   "source": [
    "#7. Data Aggregation: \n",
    "#a. Find max value in all columns using groupby function on 'continent' column Tip: use reset_index() after applying groupby \n",
    "#b. Store the result in a new dataframe named 'df_groupby'. (Use df_groupby dataframe for all further analysis)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "0f983434",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>location</th>\n",
       "      <th>date</th>\n",
       "      <th>total_cases</th>\n",
       "      <th>total_deaths</th>\n",
       "      <th>gdp_per_capita</th>\n",
       "      <th>human_development_index</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>continent</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Africa</th>\n",
       "      <td>Zimbabwe</td>\n",
       "      <td>2020-12-11</td>\n",
       "      <td>752269.0</td>\n",
       "      <td>20314.0</td>\n",
       "      <td>26382.287</td>\n",
       "      <td>0.797</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Asia</th>\n",
       "      <td>Yemen</td>\n",
       "      <td>2020-12-11</td>\n",
       "      <td>8874290.0</td>\n",
       "      <td>130519.0</td>\n",
       "      <td>116935.600</td>\n",
       "      <td>0.933</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Europe</th>\n",
       "      <td>Vatican</td>\n",
       "      <td>2020-12-11</td>\n",
       "      <td>1991233.0</td>\n",
       "      <td>52147.0</td>\n",
       "      <td>94277.965</td>\n",
       "      <td>0.953</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>North America</th>\n",
       "      <td>United States Virgin Islands</td>\n",
       "      <td>2020-12-11</td>\n",
       "      <td>11205486.0</td>\n",
       "      <td>247220.0</td>\n",
       "      <td>54225.446</td>\n",
       "      <td>0.926</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Oceania</th>\n",
       "      <td>Wallis and Futuna</td>\n",
       "      <td>2020-12-11</td>\n",
       "      <td>27750.0</td>\n",
       "      <td>907.0</td>\n",
       "      <td>44648.710</td>\n",
       "      <td>0.939</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>South America</th>\n",
       "      <td>Venezuela</td>\n",
       "      <td>2020-12-11</td>\n",
       "      <td>5876464.0</td>\n",
       "      <td>166014.0</td>\n",
       "      <td>22767.037</td>\n",
       "      <td>0.843</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                   location       date  total_cases  \\\n",
       "continent                                                             \n",
       "Africa                             Zimbabwe 2020-12-11     752269.0   \n",
       "Asia                                  Yemen 2020-12-11    8874290.0   \n",
       "Europe                              Vatican 2020-12-11    1991233.0   \n",
       "North America  United States Virgin Islands 2020-12-11   11205486.0   \n",
       "Oceania                   Wallis and Futuna 2020-12-11      27750.0   \n",
       "South America                     Venezuela 2020-12-11    5876464.0   \n",
       "\n",
       "               total_deaths  gdp_per_capita  human_development_index  \n",
       "continent                                                             \n",
       "Africa              20314.0       26382.287                    0.797  \n",
       "Asia               130519.0      116935.600                    0.933  \n",
       "Europe              52147.0       94277.965                    0.953  \n",
       "North America      247220.0       54225.446                    0.926  \n",
       "Oceania               907.0       44648.710                    0.939  \n",
       "South America      166014.0       22767.037                    0.843  "
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#a. Find max value in all columns using groupby function on 'continent' column Tip: use reset_index() after applying groupby\n",
    "df_groupby = df.groupby(['continent']).agg({'location':'max','date':'max','total_cases':'max','total_deaths':\n",
    "                                           'max','gdp_per_capita':'max','human_development_index':'max'})\n",
    "df_groupby"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "a061bad5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>index</th>\n",
       "      <th>continent</th>\n",
       "      <th>location</th>\n",
       "      <th>date</th>\n",
       "      <th>total_cases</th>\n",
       "      <th>total_deaths</th>\n",
       "      <th>gdp_per_capita</th>\n",
       "      <th>human_development_index</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>Africa</td>\n",
       "      <td>Zimbabwe</td>\n",
       "      <td>2020-12-11</td>\n",
       "      <td>752269.0</td>\n",
       "      <td>20314.0</td>\n",
       "      <td>26382.287</td>\n",
       "      <td>0.797</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>Asia</td>\n",
       "      <td>Yemen</td>\n",
       "      <td>2020-12-11</td>\n",
       "      <td>8874290.0</td>\n",
       "      <td>130519.0</td>\n",
       "      <td>116935.600</td>\n",
       "      <td>0.933</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>Europe</td>\n",
       "      <td>Vatican</td>\n",
       "      <td>2020-12-11</td>\n",
       "      <td>1991233.0</td>\n",
       "      <td>52147.0</td>\n",
       "      <td>94277.965</td>\n",
       "      <td>0.953</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>North America</td>\n",
       "      <td>United States Virgin Islands</td>\n",
       "      <td>2020-12-11</td>\n",
       "      <td>11205486.0</td>\n",
       "      <td>247220.0</td>\n",
       "      <td>54225.446</td>\n",
       "      <td>0.926</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>Oceania</td>\n",
       "      <td>Wallis and Futuna</td>\n",
       "      <td>2020-12-11</td>\n",
       "      <td>27750.0</td>\n",
       "      <td>907.0</td>\n",
       "      <td>44648.710</td>\n",
       "      <td>0.939</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>5</td>\n",
       "      <td>South America</td>\n",
       "      <td>Venezuela</td>\n",
       "      <td>2020-12-11</td>\n",
       "      <td>5876464.0</td>\n",
       "      <td>166014.0</td>\n",
       "      <td>22767.037</td>\n",
       "      <td>0.843</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   index      continent                      location       date  total_cases  \\\n",
       "0      0         Africa                      Zimbabwe 2020-12-11     752269.0   \n",
       "1      1           Asia                         Yemen 2020-12-11    8874290.0   \n",
       "2      2         Europe                       Vatican 2020-12-11    1991233.0   \n",
       "3      3  North America  United States Virgin Islands 2020-12-11   11205486.0   \n",
       "4      4        Oceania             Wallis and Futuna 2020-12-11      27750.0   \n",
       "5      5  South America                     Venezuela 2020-12-11    5876464.0   \n",
       "\n",
       "   total_deaths  gdp_per_capita  human_development_index  \n",
       "0       20314.0       26382.287                    0.797  \n",
       "1      130519.0      116935.600                    0.933  \n",
       "2       52147.0       94277.965                    0.953  \n",
       "3      247220.0       54225.446                    0.926  \n",
       "4         907.0       44648.710                    0.939  \n",
       "5      166014.0       22767.037                    0.843  "
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "##b. Store the result in a new dataframe named 'df_groupby'. (Use df_groupby dataframe for all further analysis)\n",
    "df_groupby = df_groupby.reset_index()\n",
    "df_groupby"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "9f4be07a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>continent</th>\n",
       "      <th>location</th>\n",
       "      <th>date</th>\n",
       "      <th>total_cases</th>\n",
       "      <th>total_deaths</th>\n",
       "      <th>gdp_per_capita</th>\n",
       "      <th>human_development_index</th>\n",
       "      <th>total_deaths_to_total_cases</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>index</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Africa</td>\n",
       "      <td>Zimbabwe</td>\n",
       "      <td>2020-12-11</td>\n",
       "      <td>752269.0</td>\n",
       "      <td>20314.0</td>\n",
       "      <td>26382.287</td>\n",
       "      <td>0.797</td>\n",
       "      <td>0.027004</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Asia</td>\n",
       "      <td>Yemen</td>\n",
       "      <td>2020-12-11</td>\n",
       "      <td>8874290.0</td>\n",
       "      <td>130519.0</td>\n",
       "      <td>116935.600</td>\n",
       "      <td>0.933</td>\n",
       "      <td>0.014708</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Europe</td>\n",
       "      <td>Vatican</td>\n",
       "      <td>2020-12-11</td>\n",
       "      <td>1991233.0</td>\n",
       "      <td>52147.0</td>\n",
       "      <td>94277.965</td>\n",
       "      <td>0.953</td>\n",
       "      <td>0.026188</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>North America</td>\n",
       "      <td>United States Virgin Islands</td>\n",
       "      <td>2020-12-11</td>\n",
       "      <td>11205486.0</td>\n",
       "      <td>247220.0</td>\n",
       "      <td>54225.446</td>\n",
       "      <td>0.926</td>\n",
       "      <td>0.022062</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Oceania</td>\n",
       "      <td>Wallis and Futuna</td>\n",
       "      <td>2020-12-11</td>\n",
       "      <td>27750.0</td>\n",
       "      <td>907.0</td>\n",
       "      <td>44648.710</td>\n",
       "      <td>0.939</td>\n",
       "      <td>0.032685</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>South America</td>\n",
       "      <td>Venezuela</td>\n",
       "      <td>2020-12-11</td>\n",
       "      <td>5876464.0</td>\n",
       "      <td>166014.0</td>\n",
       "      <td>22767.037</td>\n",
       "      <td>0.843</td>\n",
       "      <td>0.028251</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           continent                      location       date  total_cases  \\\n",
       "index                                                                        \n",
       "0             Africa                      Zimbabwe 2020-12-11     752269.0   \n",
       "1               Asia                         Yemen 2020-12-11    8874290.0   \n",
       "2             Europe                       Vatican 2020-12-11    1991233.0   \n",
       "3      North America  United States Virgin Islands 2020-12-11   11205486.0   \n",
       "4            Oceania             Wallis and Futuna 2020-12-11      27750.0   \n",
       "5      South America                     Venezuela 2020-12-11    5876464.0   \n",
       "\n",
       "       total_deaths  gdp_per_capita  human_development_index  \\\n",
       "index                                                          \n",
       "0           20314.0       26382.287                    0.797   \n",
       "1          130519.0      116935.600                    0.933   \n",
       "2           52147.0       94277.965                    0.953   \n",
       "3          247220.0       54225.446                    0.926   \n",
       "4             907.0       44648.710                    0.939   \n",
       "5          166014.0       22767.037                    0.843   \n",
       "\n",
       "       total_deaths_to_total_cases  \n",
       "index                               \n",
       "0                         0.027004  \n",
       "1                         0.014708  \n",
       "2                         0.026188  \n",
       "3                         0.022062  \n",
       "4                         0.032685  \n",
       "5                         0.028251  "
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#8. Feature Engineering : \n",
    "#a. Create a new feature 'total_deaths_to_total_cases' by ratio of 'total_deaths' column to 'total_cases'\n",
    "df_groupby['total_deaths_to_total_cases'] = (df_groupby['total_deaths']/df_groupby['total_cases'])\n",
    "df_groupby.set_index(['index'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "6087e65f",
   "metadata": {},
   "outputs": [],
   "source": [
    "#9. Data Visualization : \n",
    "#a. Perform Univariate analysis on 'gdp_per_capita' column by plotting histogram using seaborn dist plot. \n",
    "#b. Plot a scatter plot of 'total_cases' & 'gdp_per_capita' \n",
    "#c. Plot Pairplot on df_groupby dataset. \n",
    "#d. Plot a bar plot of 'continent' column with 'total_cases' \n",
    "#Tip : using kind='bar' in seaborn catplot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "e5ccde3b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:ylabel='Frequency'>"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df_groupby['gdp_per_capita'].plot(kind='hist')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "0deeda85",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "c:\\users\\nithin\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\seaborn\\distributions.py:2619: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).\n",
      "  warnings.warn(msg, FutureWarning)\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "##a. Perform Univariate analysis on 'gdp_per_capita' column by plotting histogram using seaborn dist plot.\n",
    "sns.distplot(df_groupby['gdp_per_capita'],hist=True)\n",
    "plt.grid()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "id": "052eb599",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.JointGrid at 0x27c12680a60>"
      ]
     },
     "execution_count": 72,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x432 with 3 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "##b. Plot a scatter plot of 'total_cases' & 'gdp_per_capita'\n",
    "sns.jointplot(data=df_groupby, x='total_cases', y='gdp_per_capita', kind='scatter')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "id": "88474247",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.PairGrid at 0x27c1278ffd0>"
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 1080x1080 with 42 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "##c. Plot Pairplot on df_groupby dataset\n",
    "sns.pairplot(data=df_groupby)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "id": "1b9afe60",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.FacetGrid at 0x27c153c6a00>"
      ]
     },
     "execution_count": 82,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#d. Plot a bar plot of 'continent' column with 'total_cases'\n",
    "sns.catplot(data=df_groupby, x='continent', y='total_cases',kind='bar')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "id": "8a9f7c44",
   "metadata": {},
   "outputs": [],
   "source": [
    "#10.Save the df_groupby dataframe in your local drive using pandas.to_csv function .\n",
    "df_groupby.to_csv('dfGroupby.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0a16a9c5",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
